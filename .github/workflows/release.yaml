name: Update Release Notes

on:
  push:
    tags:
      - "release-*"

jobs:
  release_notes:
    runs-on: ubuntu-latest
    container: ghcr.io/mzbac/mzbac/llama.cpp-docker:light
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get last two release tags
        run: |
          TAGS=$(git tag -l 'release-*' | sort -V | tail -n 2)
          readarray -t TAG_ARRAY <<< "$TAGS"
          echo "PREVIOUS_TAG=${TAG_ARRAY[0]}" >> $GITHUB_ENV
          echo "LATEST_TAG=${TAG_ARRAY[1]}" >> $GITHUB_ENV

      - name: check current dir
        run: ls -la

      - name: Generate release notes
        id: output_step
        run: |
          RELEASE_NOTES=$(git log --pretty=format:"- %s" --grep='^foo:' ${{ env.PREVIOUS_TAG }}..${{ env.LATEST_TAG }})
          echo "release_notes=${RELEASE_NOTES}" >> $GITHUB_OUTPUT

  update-release-note:
    needs: release_notes
    runs-on: ubuntu-latest
    steps:
      - name: Get last two release tags
        run: |
          TAGS=$(git tag -l 'release-*' | sort -V | tail -n 2)
          readarray -t TAG_ARRAY <<< "$TAGS"
          echo "PREVIOUS_TAG=${TAG_ARRAY[0]}" >> $GITHUB_ENV
          echo "LATEST_TAG=${TAG_ARRAY[1]}" >> $GITHUB_ENV

      - name: Update GitHub Release Notes
        run: |
          # Get release ID
          RELEASE_ID=$(curl --silent -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.LATEST_TAG }}" \
          | jq '.id')

          # Update the release
          curl --silent -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/json" \
          "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID" \
          -d '{
            "body": "'"${{ needs.release_notes.outputs.output_step.release_notes }}"'"
          }'
